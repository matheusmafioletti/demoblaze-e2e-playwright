name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      include_mobile:
        description: 'Include mobile tests'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: |
        # Determine which projects to run
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use selected options
          PROJECTS=""
          
          # Add desktop browsers based on selection
          if [ "${{ inputs.browser }}" == "all" ]; then
            PROJECTS="--project=chromium --project=firefox --project=webkit"
          else
            PROJECTS="--project=${{ inputs.browser }}"
          fi
          
          # Add mobile if selected
          if [ "${{ inputs.include_mobile }}" == "true" ]; then
            PROJECTS="$PROJECTS --project=mobile-chrome --project=mobile-safari"
          fi
          
          echo "Running tests with projects: $PROJECTS"
          npx playwright test $PROJECTS
        else
          # Automatic trigger (push/PR) - run all tests
          echo "Running all tests (automatic trigger)"
          npm test
        fi

    - name: Checkout gh-pages branch for history
      if: always()
      continue-on-error: true
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages-dir
    
    - name: Copy history to allure-results
      if: always()
      run: |
        echo "üìú Looking for Allure history from previous run..."
        
        if [ -d "gh-pages-dir/history" ]; then
          echo "‚úÖ Found history in gh-pages branch"
          echo "üìä Copying history to allure-results..."
          cp -r gh-pages-dir/history allure-results/
          echo "‚úÖ History copied successfully"
          echo ""
          echo "üìÅ History contents:"
          ls -la allure-results/history/
        elif [ -d "gh-pages-dir" ]; then
          echo "‚ö†Ô∏è gh-pages branch exists but no history/ directory found"
          echo "   (This is normal for the first run)"
          echo ""
          echo "üìÅ Contents of gh-pages:"
          ls -la gh-pages-dir/ | head -15
        else
          echo "‚ö†Ô∏è No gh-pages branch yet (normal for first run)"
          echo "   History will be created after this run"
        fi
        
        # Clean up temporary directory
        if [ -d "gh-pages-dir" ]; then
          rm -rf gh-pages-dir
          echo ""
          echo "üßπ Cleaned up temporary gh-pages-dir"
        fi

    - name: Generate Allure Report
      if: always()
      run: |
        echo "üìä Generating Allure Report..."
        npx allure generate allure-results --clean -o allure-report
        echo "‚úÖ Allure report generated successfully"
    
    - name: Verify Allure Report
      if: always()
      run: |
        echo "üîç Verifying Allure report generation..."
        
        if [ -d "allure-report" ]; then
          echo "‚úÖ allure-report directory created"
          echo ""
          echo "üìÅ Report structure:"
          ls -la allure-report/ | head -15
          
          if [ -d "allure-report/history" ]; then
            echo ""
            echo "üìä History directory found in report:"
            ls -la allure-report/history/
            echo "‚úÖ Trend charts will be visible!"
          else
            echo "‚ö†Ô∏è No history/ in report (normal for first run)"
            echo "   Trend charts will appear after 2+ runs"
          fi
        else
          echo "‚ùå allure-report directory not found!"
          exit 1
        fi
    
    - name: Upload Allure Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report
        path: allure-report/
        retention-days: 30

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: allure-report
      
      - name: Prepare deployment package
        run: |
          echo "üìä Preparing Allure Report for GitHub Pages..."
          
          # Verify allure-report exists
          if [ ! -d "allure-report" ] || [ ! "$(ls -A allure-report)" ]; then
            echo "‚ùå ERROR: allure-report not found or empty"
            exit 1
          fi
          
          echo "üìÅ Report contents:"
          ls -la allure-report/
          
          # Create deployment directory structure
          mkdir -p gh-pages
          
          # Copy report to root of gh-pages (this will be the website)
          echo ""
          echo "üìÑ Copying report to deployment directory..."
          cp -r allure-report/* gh-pages/
          
          # Copy history to root for next run to find it
          if [ -d "allure-report/history" ]; then
            echo ""
            echo "üìä Preserving history for next run..."
            cp -r allure-report/history gh-pages/
            echo "‚úÖ History preserved at gh-pages/history/"
            ls -la gh-pages/history/
          else
            echo "‚ö†Ô∏è No history in this run (will be created after first run)"
          fi
          
          echo ""
          echo "‚úÖ Deployment package ready!"
          echo "üìä Final structure:"
          ls -la gh-pages/ | head -20
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment Summary
        run: |
          echo "üéâ Allure Report deployed successfully!"
          echo "üìä View your report at: ${{ steps.deployment.outputs.page_url }}"
