name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit
      include_mobile:
        description: 'Include mobile tests'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: |
        # Determine which projects to run
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use selected options
          PROJECTS=""
          
          # Add desktop browsers based on selection
          if [ "${{ inputs.browser }}" == "all" ]; then
            PROJECTS="--project=chromium --project=firefox --project=webkit"
          else
            PROJECTS="--project=${{ inputs.browser }}"
          fi
          
          # Add mobile if selected
          if [ "${{ inputs.include_mobile }}" == "true" ]; then
            PROJECTS="$PROJECTS --project=mobile-chrome --project=mobile-safari"
          fi
          
          echo "Running tests with projects: $PROJECTS"
          npx playwright test $PROJECTS
        else
          # Automatic trigger (push/PR) - run all tests
          echo "Running all tests (automatic trigger)"
          npm test
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload test results JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository for template
        uses: actions/checkout@v4
        with:
          path: repo
      
      - name: Setup gh-pages directory
        run: |
          # Try to checkout gh-pages branch, create empty directory if it doesn't exist
          git clone --depth 1 --branch gh-pages https://github.com/${{ github.repository }}.git gh-pages 2>/dev/null || {
            echo "gh-pages branch not found, creating new directory"
            mkdir -p gh-pages
          }
      
      - name: Download current report
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./current-report
      
      - name: Download test results JSON
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./test-results
        continue-on-error: true
      
      - name: Prepare history and index page
        run: |
          mkdir -p gh-pages/reports
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          RUN_NUMBER=${{ github.run_number }}
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          REPORT_DIR="gh-pages/reports/run-${RUN_NUMBER}-${TIMESTAMP}"
          
          # Copy current report to history
          cp -r current-report "$REPORT_DIR"
          
          # Extract test statistics from JSON
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          DURATION="N/A"
          
          if [ -f "test-results/results.json" ]; then
            # Use jq to parse JSON if available, otherwise use grep/sed
            if command -v jq &> /dev/null; then
              TOTAL_TESTS=$(jq '[.suites[].specs[]] | length' test-results/results.json 2>/dev/null || echo "0")
              PASSED_TESTS=$(jq '[.suites[].specs[].tests[] | select(.status == "expected")] | length' test-results/results.json 2>/dev/null || echo "0")
              FAILED_TESTS=$(jq '[.suites[].specs[].tests[] | select(.status == "unexpected")] | length' test-results/results.json 2>/dev/null || echo "0")
              SKIPPED_TESTS=$(jq '[.suites[].specs[].tests[] | select(.status == "skipped")] | length' test-results/results.json 2>/dev/null || echo "0")
              DURATION_MS=$(jq '.stats.duration // 0' test-results/results.json 2>/dev/null || echo "0")
              
              # Convert duration to human readable format
              if [ "$DURATION_MS" -gt 0 ]; then
                DURATION_SECONDS=$((DURATION_MS / 1000))
                MINUTES=$((DURATION_SECONDS / 60))
                SECONDS=$((DURATION_SECONDS % 60))
                if [ $MINUTES -gt 0 ]; then
                  DURATION="${MINUTES}m ${SECONDS}s"
                else
                  DURATION="${SECONDS}s"
                fi
              fi
            else
              echo "⚠️ jq not found, using fallback parsing"
              TOTAL_TESTS=$(grep -o '"title"' test-results/results.json 2>/dev/null | wc -l || echo "0")
              PASSED_TESTS=$(grep -o '"status":"expected"' test-results/results.json 2>/dev/null | wc -l || echo "0")
              FAILED_TESTS=$(grep -o '"status":"unexpected"' test-results/results.json 2>/dev/null | wc -l || echo "0")
              SKIPPED_TESTS=$(grep -o '"status":"skipped"' test-results/results.json 2>/dev/null | wc -l || echo "0")
            fi
          fi
          
          echo "📊 Test Statistics:"
          echo "  Total: $TOTAL_TESTS"
          echo "  Passed: $PASSED_TESTS"
          echo "  Failed: $FAILED_TESTS"
          echo "  Skipped: $SKIPPED_TESTS"
          echo "  Duration: $DURATION"
          
          # Generate report list HTML
          REPORT_LIST=""
          REPORT_COUNT=0
          FIRST=true
          LATEST_DATE="N/A"
          
          for report in $(ls -t gh-pages/reports 2>/dev/null); do
            REPORT_COUNT=$((REPORT_COUNT + 1))
            RUN=$(echo $report | cut -d'-' -f2)
            DATE=$(echo $report | sed 's/run-[0-9]*-//' | sed 's/_/ /' | sed 's/-/:/g')
            
            if [ "$FIRST" = true ]; then
              LATEST_DATE="Run #$RUN"
              REPORT_LIST+="<li class='report-item latest'>"
              REPORT_LIST+="  <div class='report-info'>"
              REPORT_LIST+="    <div class='report-title'>Run #$RUN <span class='badge'>Latest</span></div>"
              REPORT_LIST+="    <div class='report-meta'>📅 $DATE</div>"
              REPORT_LIST+="  </div>"
              REPORT_LIST+="  <a class='view-button' href='reports/$report/index.html'>View Report →</a>"
              REPORT_LIST+="</li>"
              FIRST=false
            else
              REPORT_LIST+="<li class='report-item'>"
              REPORT_LIST+="  <div class='report-info'>"
              REPORT_LIST+="    <div class='report-title'>Run #$RUN</div>"
              REPORT_LIST+="    <div class='report-meta'>📅 $DATE</div>"
              REPORT_LIST+="  </div>"
              REPORT_LIST+="  <a class='view-button' href='reports/$report/index.html'>View Report →</a>"
              REPORT_LIST+="</li>"
            fi
          done
          
          # If no reports found
          if [ $REPORT_COUNT -eq 0 ]; then
            REPORT_LIST="<li class='report-item'><div class='report-info'><div class='report-title'>No reports available yet</div></div></li>"
          fi
          
          # Create index.html from template
          cp repo/.github/templates/reports-index.html gh-pages/index.html
          
          # Replace placeholders
          sed -i "s|<!-- Reports will be inserted here -->|$REPORT_LIST|g" gh-pages/index.html
          sed -i "s|{{TOTAL_RUNS}}|$REPORT_COUNT|g" gh-pages/index.html
          sed -i "s|{{LATEST_RUN}}|$LATEST_DATE|g" gh-pages/index.html
          sed -i "s|{{TOTAL_TESTS}}|$TOTAL_TESTS|g" gh-pages/index.html
          sed -i "s|{{PASSED_TESTS}}|$PASSED_TESTS|g" gh-pages/index.html
          sed -i "s|{{FAILED_TESTS}}|$FAILED_TESTS|g" gh-pages/index.html
          sed -i "s|{{SKIPPED_TESTS}}|$SKIPPED_TESTS|g" gh-pages/index.html
          sed -i "s|{{DURATION}}|$DURATION|g" gh-pages/index.html
          
          echo "✅ Index page created with $REPORT_COUNT reports"
          echo "Latest report: $LATEST_DATE"
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
